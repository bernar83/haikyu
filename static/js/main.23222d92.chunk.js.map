{"version":3,"sources":["components/CategoryForm.js","App.js","serviceWorker.js","index.js"],"names":["CategoryForm","react_default","a","createElement","FormControl_default","style","display","InputLabel_default","Select_default","value","this","props","category","onChange","handleChange","inputProps","name","map","MenuItem_default","key","Component","App","state","labels","chartData","isAdd","handleAdd","_this","setState","setData","handleSubtract","_this$state","lastDataPoint","length","pushNewDataPoint","push","handleDelete","_this$state2","pop","event","Object","defineProperty","target","dataPoints","es","data","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","steppedLine","options","responsive","title","text","redraw","alignItems","justifyContent","marginBottom","components_CategoryForm","Button_default","variant","color","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAwCeA,mLAhCX,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAaG,MAAO,CAAEC,QAAS,UAC7BL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,iBACAD,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,MAAOC,KAAKC,MAAMC,SAClBC,SAAUH,KAAKC,MAAMG,aACrBC,WAAY,CACVC,KAAM,aAGP,CACC,MACA,OACA,QACA,gBACA,sBACA,QACA,gBACA,kBACAC,IAAI,SAAAL,GACJ,OACEX,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAUiB,IAAKP,EAAUH,MAAOG,GAC7BA,cAxBUQ,aC0IZC,6MAzIbC,MAAQ,CACNC,OAAQ,CAAC,SACTC,UAAW,CAAC,GACZC,OAAO,EACPb,SAAU,SAGZc,UAAY,WACVC,EAAKC,SAAS,CAAEH,OAAO,GAAQ,WAC7BE,EAAKE,eAITC,eAAiB,WACfH,EAAKC,SAAS,CAAEH,OAAO,GAAS,WAC9BE,EAAKE,eAITA,QAAU,WAAM,IAAAE,EACgBJ,EAAKL,MAA3BE,EADMO,EACNP,UAAWD,EADLQ,EACKR,OACbS,EAAgBR,EAAUA,EAAUS,OAAS,GACnDN,EAAKO,iBAAiBV,EAAWQ,GACjCT,EAAOY,KAAKR,EAAKL,MAAMV,UACvBe,EAAKC,SAAS,CAAEJ,UAAWA,EAAWD,OAAQA,OAGhDa,aAAe,WAAM,IAAAC,EACWV,EAAKL,MAA3BE,EADWa,EACXb,UAAWD,EADAc,EACAd,OACfC,EAAUS,OAAS,IACrBT,EAAUc,MACVf,EAAOe,MACPX,EAAKC,SAAS,CAAEJ,UAAWA,EAAWD,OAAQA,QAIlDT,aAAe,SAAAyB,GACbZ,EAAKC,SAALY,OAAAC,EAAA,EAAAD,CAAA,GAAiBD,EAAMG,OAAO1B,KAAOuB,EAAMG,OAAOjC,yFAGnCkC,EAAYX,GACvBtB,KAAKY,MAAMG,MACbkB,EAAWR,KAAKH,EAAgB,GAEhCW,EAAWR,KAAKH,EAAgB,oCAKlC,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACEC,KAAM,CACJtB,OAAQb,KAAKY,MAAMC,OACnBuB,SAAU,CACR,CACEC,MAAO,QACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBnB,KAAMnC,KAAKY,MAAME,UACjByC,YAAa,WAInBC,QAAS,CACPC,YAAY,EACZC,MAAO,CACL9D,SAAS,EACT+D,KAAM,WAGVC,QAAM,IAERrE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,QAAS,OACTiE,WAAY,SACZC,eAAgB,SAChBC,aAAc,SAGhBxE,EAAAC,EAAAC,cAACuE,EAAD,CACE5D,aAAcJ,KAAKI,aACnBF,SAAUF,KAAKY,MAAMV,YAGzBX,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLC,QAAS,OACTiE,WAAY,SACZC,eAAgB,WAGlBvE,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CACE0E,QAAQ,YACRC,MAAM,UACNC,QAASpE,KAAKoB,gBAHhB,KAOA7B,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CACE0E,QAAQ,YACRC,MAAM,YACNC,QAASpE,KAAK0B,cAHhB,UAOAnC,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CACE0E,QAAQ,YACRC,MAAM,UACNC,QAASpE,KAAKgB,WAHhB,eA5HMN,aCME2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23222d92.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nclass CategoryForm extends Component {\n  render() {\n    return (\n      <FormControl style={{ display: \"block\" }}>\n        <InputLabel>Category</InputLabel>\n        <Select\n          value={this.props.category}\n          onChange={this.props.handleChange}\n          inputProps={{\n            name: \"category\"\n          }}\n        >\n          {[\n            \"Ace\",\n            \"Kill\",\n            \"Block\",\n            \"Service Error\",\n            \"Ball Handling Error\",\n            \"Fault\",\n            \"Hitting Error\",\n            \"Blocking Error\"\n          ].map(category => {\n            return (\n              <MenuItem key={category} value={category}>\n                {category}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    );\n  }\n}\n\nexport default CategoryForm;\n","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Button from \"@material-ui/core/Button\";\n\nimport CategoryForm from \"./components/CategoryForm\";\n\nclass App extends Component {\n  state = {\n    labels: [\"start\"],\n    chartData: [0],\n    isAdd: false,\n    category: \"Ace\"\n  };\n\n  handleAdd = () => {\n    this.setState({ isAdd: true }, () => {\n      this.setData();\n    });\n  };\n\n  handleSubtract = () => {\n    this.setState({ isAdd: false }, () => {\n      this.setData();\n    });\n  };\n\n  setData = () => {\n    const { chartData, labels } = this.state;\n    const lastDataPoint = chartData[chartData.length - 1];\n    this.pushNewDataPoint(chartData, lastDataPoint);\n    labels.push(this.state.category);\n    this.setState({ chartData: chartData, labels: labels });\n  };\n\n  handleDelete = () => {\n    const { chartData, labels } = this.state;\n    if (chartData.length > 1) {\n      chartData.pop();\n      labels.pop();\n      this.setState({ chartData: chartData, labels: labels });\n    }\n  };\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  pushNewDataPoint(dataPoints, lastDataPoint) {\n    if (this.state.isAdd) {\n      dataPoints.push(lastDataPoint + 1);\n    } else {\n      dataPoints.push(lastDataPoint - 1);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Line\n          data={{\n            labels: this.state.labels,\n            datasets: [\n              {\n                label: \"Trend\",\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: \"rgba(75,192,192,0.4)\",\n                borderColor: \"rgba(75,192,192,1)\",\n                borderCapStyle: \"butt\",\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: \"miter\",\n                pointBorderColor: \"rgba(75,192,192,1)\",\n                pointBackgroundColor: \"#fff\",\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n                pointHoverBorderColor: \"rgba(220,220,220,1)\",\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data: this.state.chartData,\n                steppedLine: \"after\"\n              }\n            ]\n          }}\n          options={{\n            responsive: true,\n            title: {\n              display: true,\n              text: \"Haikyu\"\n            }\n          }}\n          redraw\n        />\n        <div>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              marginBottom: \"10px\"\n            }}\n          >\n            <CategoryForm\n              handleChange={this.handleChange}\n              category={this.state.category}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\"\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleSubtract}\n            >\n              -\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={this.handleDelete}\n            >\n              Delete\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleAdd}\n            >\n              +\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}